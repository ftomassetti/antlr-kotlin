buildscript {
    ext.kotlin_version = '1.2.40'

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        mavenLocal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.com.craigburke.gradle:karma-gradle:1.4.4"
        classpath "com.strumenta.antlr-kotlin:antlr-kotlin-gradle-plugin:0.0.1"
    }
}

apply plugin: 'kotlin2js'
apply plugin: 'idea'
apply plugin: 'com.craigburke.karma'
apply plugin: 'com.strumenta.antlrkotlin'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile "com.strumenta.antlr-kotlin:antlr-kotlin-runtime-common:0.0.1"
    compile "com.strumenta.antlr-kotlin:antlr-kotlin-runtime-js:0.0.1"
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

generateKotlinGrammarSource {
    maxHeapSize = "64m"
    //arguments += ['-package', 'me.tomassetti.minicalc']
    outputDirectory = new File("generated-src/antlr/".toString())
}
compileKotlin2Js.dependsOn generateKotlinGrammarSource
sourceSets {
    generated {
        kotlin.srcDir 'generated-src/antlr/'
    }
}
compileKotlin2Js.source sourceSets.generated.kotlin, sourceSets.main.kotlin

clean{
    delete "generated-src"
}

idea {
    module {
        sourceDirs += file("generated-src/antlr/")
    }
}

def libDir = "$buildDir/lib"
def compileOutput = compileKotlin2Js.outputFile
def testOutput = compileTestKotlin2Js.outputFile

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into libDir
}

karma {
    dependencies(['mocha'])

    frameworks = ['mocha']
    browsers = ['PhantomJS']

    files = [
            "$libDir/kotlin.js",
            "$libDir/*.js",
            compileOutput,
            testOutput
    ]
}

karmaRun {
    dependsOn compileTestKotlin2Js
    dependsOn populateNodeModules
}

test.dependsOn karmaRun
clean.dependsOn karmaClean

task assembleWeb(type: Sync) {
    configurations.compile.each { File file ->
        from(zipTree(file.absolutePath), {
            includeEmptyDirs = false
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                        !path.startsWith("META-INF/"))
            }
        })
    }
    from compileKotlin2Js.destinationDir
    into "${projectDir}/js"

    dependsOn classes
}

assemble.dependsOn assembleWeb